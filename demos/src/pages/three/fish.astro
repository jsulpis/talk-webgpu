---
import Layout from "../../layouts/Layout.astro";
---

<script>
  import * as THREE from "three";
  import { GLTFLoader } from "three/addons/loaders/GLTFLoader.js";
  import { setAnimationLoop } from "../../shared/helpers";

  const mainFishUrl = "/talk-webgpu/clownfish.glb";

  const scene = new THREE.Scene();

  let mixer: THREE.AnimationMixer;

  const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
  camera.position.z = 10;

  const renderer = new THREE.WebGLRenderer({ canvas: document.querySelector("canvas")!, antialias: true, alpha: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setPixelRatio(2);

  // for consistency with the other demos + make colors more flashy
  renderer.outputColorSpace = THREE.LinearSRGBColorSpace;
  renderer.toneMapping = THREE.NoToneMapping;

  const ambientLight = new THREE.AmbientLight(0xffffff, 10);
  scene.add(ambientLight);

  const directionalLight = new THREE.DirectionalLight(0xffffff, 10);
  directionalLight.position.set(1, 1, 1).normalize();
  scene.add(directionalLight);

  loadModel();

  window.addEventListener("resize", onWindowResize);

  function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  }

  function loadModel() {
    const loader = new GLTFLoader();

    loader.load(mainFishUrl, function (gltf) {
      const model = gltf.scene;
      model.lookAt(new THREE.Vector3(1, 0.25, 0.6));
      model.position.x = 0.45;
      model.traverse(fixMaterial);

      scene.add(model);

      mixer = new THREE.AnimationMixer(model);
      let action = mixer.clipAction(gltf.animations.find((clip) => clip.name.includes("Swimming_Normal"))!);
      action.play();
    });
  }

  function fixMaterial(child: THREE.Object3D<THREE.Object3DEventMap>) {
    if (child instanceof THREE.Mesh) {
      const mat = child.material as THREE.MeshStandardMaterial;
      mat.opacity = 1;
      mat.roughness = child.material.name.includes("Eyes") ? 0.1 : 0.7;
    }
  }

  setAnimationLoop(function render({ deltaTime }) {
    mixer?.update(deltaTime / 2000);
    renderer.render(scene, camera);
  });
</script>

<Layout />
