---
import Layout from "../../layouts/Layout.astro";
---

<script>
  import * as THREE from "three";
  import Stats from "three/addons/libs/stats.module.js";
  import { GUI } from "three/addons/libs/lil-gui.module.min.js";

  const amount = parseInt(window.location.search.slice(1)) || 20;
  const count = Math.pow(amount, 3);
  const dummy = new THREE.Object3D();

  document.getElementById("objects")!.innerText = count.toString();

  const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 100);
  camera.position.set(amount * 0.9, amount * 0.9, amount * 0.9);
  camera.lookAt(0, 0, 0);

  const scene = new THREE.Scene();
  scene.background = new THREE.Color("#def");

  const material = new THREE.MeshNormalMaterial();

  let mesh: THREE.InstancedMesh;

  const loader = new THREE.BufferGeometryLoader();
  loader.load("/suzanne.json", function (geometry) {
    geometry.computeVertexNormals();
    geometry.scale(0.5, 0.5, 0.5);

    mesh = new THREE.InstancedMesh(geometry, material, count);
    mesh.instanceMatrix.setUsage(THREE.DynamicDrawUsage);

    scene.add(mesh);

    const gui = new GUI();
    gui.add(mesh, "count", 1, count);
  });

  const renderer = new THREE.WebGLRenderer({ canvas: document.querySelector("canvas")!, antialias: true });
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setAnimationLoop(animate);

  const stats = new Stats();
  document.body.appendChild(stats.dom);

  window.addEventListener("resize", onWindowResize);

  function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

    renderer.setSize(window.innerWidth, window.innerHeight);
  }

  function animate() {
    render();

    stats.update();
  }

  const renderElement = document.getElementById("render")!;

  function render() {
    performance.mark("render");

    if (mesh) {
      const time = Date.now() * 0.001;

      mesh.rotation.x = Math.sin(time / 4);
      mesh.rotation.y = Math.sin(time / 2);

      let i = 0;
      const offset = (amount - 1) / 2;

      for (let x = 0; x < amount; x++) {
        for (let y = 0; y < amount; y++) {
          for (let z = 0; z < amount; z++) {
            dummy.position.set(offset - x, offset - y, offset - z);
            dummy.rotation.y = Math.sin(x / 4 + time) + Math.sin(y / 4 + time) + Math.sin(z / 4 + time);
            dummy.rotation.z = dummy.rotation.y * 2;

            dummy.updateMatrix();
            mesh.setMatrixAt(i++, dummy.matrix);
          }
        }
      }
      mesh.instanceMatrix.needsUpdate = true;
    }

    renderer.render(scene, camera);
    const render = performance.measure("render", "render");

    renderElement.textContent = render.duration.toFixed(2) + "ms";
  }
</script>

<Layout />
