---
import Layout from "../../layouts/Layout.astro";
---

<script>
  import * as THREE from "three/webgpu";
  import { GLTFLoader } from "three/addons/loaders/GLTFLoader.js";
  import { OrbitControls } from "three/addons/controls/OrbitControls.js";
  import { clone } from "three/addons/utils/SkeletonUtils.js";
  import { BOUNDS } from "../../shared/params";
  import { computeVelocities, computePositions } from "../../three/gpgpu";

  const modelUrl = "/Fish.glb";

  const WIDTH = 16;
  const FISHES = WIDTH * WIDTH;

  document.getElementById("objects")!.innerText = FISHES.toString();
  document.getElementById("api")!.innerText = "WebGPU";

  const models: THREE.Object3D[] = [];

  /******************************************************************* */
  /***************************** GPGPU *********************************/
  /******************************************************************* */

  let positionsBufferA = new Float32Array(FISHES * 3);
  for (let i = 0; i < positionsBufferA.length; i += 3) {
    positionsBufferA[i + 0] = ((Math.random() - 0.5) * BOUNDS) / 4;
    positionsBufferA[i + 1] = ((Math.random() - 0.5) * BOUNDS) / 4;
    positionsBufferA[i + 2] = ((Math.random() - 0.5) * BOUNDS) / 4;
  }
  let positionsBufferB = new Float32Array(FISHES * 3);

  const positionsBuffers = {
    read: positionsBufferA,
    write: positionsBufferB,
  };

  function swapPositionsBuffers() {
    const temp = positionsBuffers.read;
    positionsBuffers.read = positionsBuffers.write;
    positionsBuffers.write = temp;
  }

  let velocityBufferA = new Float32Array(FISHES * 3);
  for (let i = 0; i < velocityBufferA.length; i += 3) {
    velocityBufferA[i + 0] = 0.5;
    velocityBufferA[i + 1] = 0.5;
    velocityBufferA[i + 2] = 0.5;
  }
  let velocityBufferB = new Float32Array(FISHES * 3);

  const velocityBuffers = {
    read: velocityBufferA,
    write: velocityBufferB,
  };

  function swapVelocityBuffers() {
    const temp = velocityBuffers.read;
    velocityBuffers.read = velocityBuffers.write;
    velocityBuffers.write = temp;
  }

  function moveModels(positions: Float32Array, velocities: Float32Array) {
    models.forEach((model, i) => {
      model.position.x = positions[i * 3 + 0];
      model.position.y = positions[i * 3 + 1];
      model.position.z = positions[i * 3 + 2];

      model.lookAt(
        model.position.x + velocities[i * 3 + 0],
        model.position.y + velocities[i * 3 + 1],
        model.position.z + velocities[i * 3 + 2]
      );
    });
  }

  /****************************************************************** */
  /***************************** INIT *********************************/
  /****************************************************************** */

  const scene = new THREE.Scene();
  scene.background = new THREE.Color("#def");

  const mixers: THREE.AnimationMixer[] = [];

  const camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 1000);
  camera.position.z = BOUNDS * 2;

  const geometry = new THREE.BoxGeometry(BOUNDS, BOUNDS, BOUNDS);
  const material = new THREE.MeshBasicMaterial({
    color: 0x0000ff,
    wireframe: true,
  });
  const cube = new THREE.Mesh(geometry, material);
  scene.add(cube);

  const renderer = new THREE.WebGPURenderer({ canvas: document.querySelector("canvas")!, antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setPixelRatio(2);
  renderer.setAnimationLoop(animate);

  console.log(renderer.backend);

  const controls = new OrbitControls(camera, renderer.domElement);
  controls.enableDamping = true;
  controls.dampingFactor = 0.05;

  const ambientLight = new THREE.AmbientLight(0xffffff, 1);
  scene.add(ambientLight);

  const directionalLight = new THREE.DirectionalLight(0xffffff, 2);
  directionalLight.position.set(1, 1, 1).normalize();
  scene.add(directionalLight);

  loadModel();

  window.addEventListener("resize", onWindowResize);

  function loadModel() {
    const loader = new GLTFLoader();
    loader.load(modelUrl, function (gltf) {
      const model = gltf.scene;
      scene.add(model);
      models.push(model);

      let mixer = new THREE.AnimationMixer(model);
      let action = mixer.clipAction(gltf.animations[0]);
      action.play();
      mixers.push(mixer);

      for (let i = 0; i < FISHES; i++) {
        const clonedModel = clone(model);
        models.push(clonedModel);

        getMaterial(clonedModel).color = new THREE.Color(0, 0.6 + Math.random() * 0.4, 0.6 + Math.random() * 0.4);
        scene.add(clonedModel);

        mixer = new THREE.AnimationMixer(clonedModel);
        action = mixer.clipAction(gltf.animations[0]);
        action.startAt(Math.random() * -2);
        action.setEffectiveTimeScale(2);
        action.play();
        mixers.push(mixer);
      }

      getMesh(model).material = new THREE.MeshStandardMaterial({
        color: "red",
      });
    });
  }

  function getMesh(gltfModel: THREE.Object3D): THREE.Mesh {
    return gltfModel.children[0].children[0].children[0] as THREE.Mesh;
  }

  function getMaterial(gltfModel: THREE.Object3D): THREE.MeshStandardMaterial {
    return getMesh(gltfModel).material as THREE.MeshStandardMaterial;
  }

  function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  }

  /********************************************************************* */
  /***************************** ANIMATE *********************************/
  /********************************************************************* */

  const separation = 5.0;
  const alignment = 4.0;
  const cohesion = 10.0;
  const speed = 3;

  const renderElement = document.getElementById("render")!;
  const computeElement = document.getElementById("compute")!;

  const clock = new THREE.Clock();

  function animate() {
    controls.update();
    const deltaTime = clock.getDelta() * speed;

    performance.mark("compute");

    computeVelocities(
      velocityBuffers.read,
      velocityBuffers.write,
      positionsBuffers.read,
      deltaTime,
      separation,
      alignment,
      cohesion
    );
    swapVelocityBuffers();

    computePositions(positionsBuffers.read, positionsBuffers.write, velocityBuffers.read, deltaTime);
    swapPositionsBuffers();

    const compute = performance.measure("compute", "compute");
    computeElement.textContent = compute.duration.toFixed(2) + "ms";

    moveModels(positionsBuffers.read, velocityBuffers.read);

    mixers.forEach((mixer) => mixer.update(deltaTime));

    performance.mark("render");
    renderer.render(scene, camera);
    const render = performance.measure("render", "render");
    renderElement.textContent = render.duration.toFixed(2) + "ms";
  }
</script>

<Layout api="WebGPU" />
