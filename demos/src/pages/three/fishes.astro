---
import Layout from "../../layouts/Layout.astro";
---

<script>
  import * as THREE from "three";
  import { GLTFLoader } from "three/addons/loaders/GLTFLoader.js";
  import { OrbitControls } from "three/addons/controls/OrbitControls.js";
  import { clone } from "three/addons/utils/SkeletonUtils.js";
  import { computePositions, computeVelocities } from "../../three/gpgpu";
  import { canvasBackground, renderTime, setAnimationLoop } from "../../shared";
  import { type Params } from "../../commons/tweakpane";
  import { Pane } from "tweakpane";

  const BOUNDS = 30;
  const speed = 0.008;

  const boidsUniforms = {
    deltaTime: 0,
    separationDistance: 10,
    alignmentDistance: 50,
    cohesionDistance: 50,
    borderForce: 0.3,
    borderDistance: 50,
    bounds: BOUNDS,
  };

  const mainFishUrl = "/clownfish.glb";
  const otherfishUrl = "/blueTang.glb";

  const searchParams = new URL(window.location.href).searchParams;

  const params: Params = {
    api: "WebGL",
    jsTime: "0ms",
    renderTime: "0ms",
    computeTime: "0ms",
    objects: Number(searchParams.get("count") ?? 10),
  };

  const isolateFirst = searchParams.get("isolateFirst") === "true";
  const startOffscreen = searchParams.get("start") === "offscreen";

  const models: THREE.Object3D[] = [];
  const MAX_COUNT = 1000;
  const isFinalScreen = params.objects > 1 && !isolateFirst;

  if (isFinalScreen) {
    const pane = new Pane();

    pane.addBinding(params, "objects", {
      label: "objets",
      min: 10,
      max: MAX_COUNT,
      step: 1,
    });
    pane.addBinding(params, "computeTime", {
      label: "calcul",
      readonly: true,
    });
  }

  /******************************************************************* */
  /***************************** GPGPU *********************************/
  /******************************************************************* */

  let positionsBufferA = new Float32Array(MAX_COUNT * 3);
  positionsBufferA[0] = 0;
  positionsBufferA[1] = 0;
  positionsBufferA[2] = BOUNDS / 2;

  for (let i = 3; i < positionsBufferA.length; i += 3) {
    if (isFinalScreen) {
      positionsBufferA[i + 0] = (-Math.random() * 0.25 + 0.75) * BOUNDS * 2 - BOUNDS;
      positionsBufferA[i + 1] = (-Math.random() * 0.25 + 0.75) * BOUNDS * 2 - BOUNDS;
      positionsBufferA[i + 2] = (-Math.random() * 0.25 + 0.75) * BOUNDS * 2 - BOUNDS;
    } else if (startOffscreen) {
      positionsBufferA[i + 0] = BOUNDS * 3;
      positionsBufferA[i + 1] = BOUNDS * 3;
      positionsBufferA[i + 2] = BOUNDS * 3;
    } else {
      positionsBufferA[i + 0] = BOUNDS * 2;
      positionsBufferA[i + 1] = BOUNDS / 2;
      positionsBufferA[i + 2] = BOUNDS / 2;
    }
  }
  let positionsBufferB = new Float32Array(MAX_COUNT * 3);

  const positionsBuffers = {
    read: positionsBufferA,
    write: positionsBufferB,
  };

  function swapPositionsBuffers() {
    const temp = positionsBuffers.read;
    positionsBuffers.read = positionsBuffers.write;
    positionsBuffers.write = temp;
  }

  let velocityBufferA = new Float32Array(MAX_COUNT * 3);
  velocityBufferA[0] = 2;
  velocityBufferA[1] = 1;
  velocityBufferA[2] = 0;
  for (let i = 3; i < velocityBufferA.length; i += 3) {
    if (isFinalScreen) {
      velocityBufferA[i + 0] = 0.5;
      velocityBufferA[i + 1] = 0.5;
      velocityBufferA[i + 2] = 0.5;
    } else {
      velocityBufferA[i + 0] = Math.random();
      velocityBufferA[i + 1] = Math.random();
      velocityBufferA[i + 2] = Math.random();
    }
  }
  let velocityBufferB = new Float32Array(MAX_COUNT * 3);

  const velocityBuffers = {
    read: velocityBufferA,
    write: velocityBufferB,
  };

  function swapVelocityBuffers() {
    const temp = velocityBuffers.read;
    velocityBuffers.read = velocityBuffers.write;
    velocityBuffers.write = temp;
  }

  function moveModels(positions: Float32Array, velocities: Float32Array) {
    models.forEach((model, i) => {
      model.visible = i < params.objects;
      if (!model.visible) {
        return;
      }

      model.position.x = positions[i * 3 + 0];
      model.position.y = positions[i * 3 + 1];
      model.position.z = positions[i * 3 + 2];

      model.lookAt(
        model.position.x + velocities[i * 3 + 0],
        model.position.y + velocities[i * 3 + 1],
        model.position.z + velocities[i * 3 + 2]
      );
    });
  }

  /****************************************************************** */
  /***************************** INIT *********************************/
  /****************************************************************** */

  const scene = new THREE.Scene();
  scene.background = new THREE.Color(...canvasBackground.slice(0, 3));

  let mixer: THREE.AnimationMixer;

  const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);
  camera.position.z = BOUNDS * 2;

  const geometry = new THREE.BoxGeometry(BOUNDS * 2, BOUNDS * 2, BOUNDS * 2);
  const material = new THREE.MeshBasicMaterial({
    color: 0x0000ff,
    wireframe: true,
  });
  const cube = new THREE.Mesh(geometry, material);
  // scene.add(cube);

  const renderer = new THREE.WebGLRenderer({ canvas: document.querySelector("canvas")!, antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setPixelRatio(window.devicePixelRatio);

  // for consistency with the other demos + make colors more flashy
  renderer.outputColorSpace = THREE.LinearSRGBColorSpace;
  renderer.toneMapping = THREE.NoToneMapping;

  const controls = new OrbitControls(camera, renderer.domElement);
  controls.enableDamping = true;
  controls.dampingFactor = 0.05;

  const ambientLight = new THREE.AmbientLight(0xffffff, 10);
  scene.add(ambientLight);

  const directionalLight = new THREE.DirectionalLight(0xffffff, 10);
  directionalLight.position.set(1, 1, 1).normalize();
  scene.add(directionalLight);

  loadModel();

  window.addEventListener("resize", onWindowResize);

  function loadModel() {
    const loader = new GLTFLoader();

    loader.load(mainFishUrl, function (gltf) {
      const model = gltf.scene;
      model.traverse(fixMaterial);

      scene.add(model);
      models.push(model);

      mixer = new THREE.AnimationMixer(model);
      let action = mixer.clipAction(gltf.animations.find((clip) => clip.name.includes("Swimming_Fast"))!);
      action.play();

      if (params.objects === 1) {
        model.scale.set(1.5, 1.5, 1.5);
        return;
      }

      loader.load(otherfishUrl, function (gltf) {
        const model = gltf.scene;
        model.traverse(fixMaterial);

        for (let i = 1; i < MAX_COUNT; i++) {
          const clonedModel = clone(model);
          models.push(clonedModel);
          scene.add(clonedModel);
        }
      });
    });
  }

  function fixMaterial(child: THREE.Object3D<THREE.Object3DEventMap>) {
    if (child instanceof THREE.Mesh) {
      const mat = child.material as THREE.MeshStandardMaterial;
      mat.opacity = 1;
      mat.roughness = child.material.name.includes("Eyes") ? 0.1 : 0.7;
    }
  }

  function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  }

  /********************************************************************* */
  /***************************** ANIMATE *********************************/
  /********************************************************************* */

  setAnimationLoop(function render({ deltaTime }) {
    controls.update();
    const ajustedDeltaTime = deltaTime * speed;

    performance.mark("compute");

    computeVelocities(
      velocityBuffers.read,
      velocityBuffers.write,
      positionsBuffers.read,
      ajustedDeltaTime,
      boidsUniforms.separationDistance,
      boidsUniforms.alignmentDistance,
      boidsUniforms.cohesionDistance,
      isolateFirst,
      params.objects
    );
    swapVelocityBuffers();

    computePositions(
      positionsBuffers.read,
      positionsBuffers.write,
      velocityBuffers.read,
      ajustedDeltaTime,
      params.objects
    );
    swapPositionsBuffers();

    const compute = performance.measure("compute", "compute");
    params.computeTime = compute.duration.toFixed(2) + "ms";

    moveModels(positionsBuffers.read, velocityBuffers.read);

    mixer?.update(deltaTime / 1000);

    performance.mark("render");
    renderer.render(scene, camera);
    const render = performance.measure("render", "render");
    renderTime.addValue(render.duration);
    params.renderTime = renderTime.getAverage().toFixed(2) + "ms";
  });
</script>

<Layout />

<style is:global>
  div.tp-dfwv {
    --tp-blade-value-width: 18ch;
  }
</style>
