---
import Layout from "../../layouts/Layout.astro";
---

<script>
  import { jsTime, renderTime, renderUniforms, canvasBackground, setAnimationLoop, BOUNDS } from "../../shared";
  import { Pane } from "tweakpane";
  import { generateColors, generateInitialPositions, generateScales } from "../../shared/data";
  import { setupNaive } from "../../webgl/objects/naive";
  import { setupInstanced } from "../../webgl/objects/instanced";

  const MAX_COUNT = 15_000;

  const countParam = new URL(window.location.href).searchParams.get("count");
  const count = Number(countParam || MAX_COUNT);

  const positions = generateInitialPositions(count, BOUNDS);
  const colors = generateColors(count);
  const scales = generateScales(count);

  const params = {
    api: "WebGL",
    objects: Number(countParam || 10),
    method: "naive",
    jsTime: "0ms",
    renderTime: "0ms",
  };

  const pane = new Pane();

  pane.addBinding(params, "api", {
    readonly: true,
    label: "api",
  });

  if (countParam) {
    console.log("countParam", countParam);
    pane.addBinding(params, "objects", {
      label: "objects",
      readonly: true,
      format: (v) => v.toFixed(0),
    });
  } else {
    pane.addBinding(params, "objects", {
      label: "objects",
      min: 1,
      max: MAX_COUNT,
      step: 1,
    });
  }

  pane.addBinding(params, "method", {
    view: "list",
    options: [
      { text: "naive", value: "naive" },
      { text: "instancing", value: "instancing" },
    ],
  });

  const gpuFolder = pane.addFolder({ title: "GPU" });
  gpuFolder.addBinding(params, "renderTime", {
    label: "render",
    readonly: true,
  });
  const cpuFolder = pane.addFolder({ title: "CPU" });
  cpuFolder.addBinding(params, "jsTime", {
    label: "JS Time",
    readonly: true,
  });

  async function main() {
    const canvas = document.querySelector("canvas")!;
    const devicePixelRatio = 2;
    canvas.width = window.innerWidth * devicePixelRatio;
    canvas.height = window.innerHeight * devicePixelRatio;

    const gl = canvas.getContext("webgl2", { powerPreference: "high-performance" })!;
    if (!gl) {
      console.error("Unable to initialize WebGL. Your browser or machine may not support it.");
      return;
    }

    const { drawNaive } = setupNaive(gl, MAX_COUNT, positions, colors, scales);
    const { drawInstanced } = setupInstanced(gl, MAX_COUNT, positions, colors, scales);

    const { isGPUTimeAvailable, getGPUTime, endGPUTime } = useGPUTimer(gl);

    function drawScene() {
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
      gl.clearColor(...canvasBackground);
      gl.clearDepth(1.0);
      gl.enable(gl.DEPTH_TEST);
      gl.depthFunc(gl.LEQUAL);
      gl.enable(gl.CULL_FACE);
      gl.cullFace(gl.BACK);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

      if (params.method === "naive") {
        drawNaive(params.objects, renderUniforms);
      } else {
        drawInstanced(params.objects, renderUniforms);
      }
    }

    setAnimationLoop(function render({ startTime }) {
      if (!isGPUTimeAvailable()) {
        // still computing the previous frame, skip this frame
        return;
      }
      getGPUTime();
      drawScene();
      endGPUTime();

      jsTime.addValue(performance.now() - startTime);
      params.jsTime = jsTime.getAverage().toFixed(1) + "ms";
    });
  }

  window.onload = main;

  function useGPUTimer(gl: WebGL2RenderingContext) {
    const ext = gl.getExtension("EXT_disjoint_timer_query_webgl2");
    const query = gl.createQuery();
    gl.beginQuery(ext.TIME_ELAPSED_EXT, query);
    gl.endQuery(ext.TIME_ELAPSED_EXT);

    function isGPUTimeAvailable() {
      return gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE);
    }

    function getGPUTime() {
      const measuredTime = gl.getQueryParameter(query, gl.QUERY_RESULT);

      renderTime.addValue(measuredTime / 1e6);
      params.renderTime = renderTime.getAverage().toFixed(1) + "ms";
      gl.beginQuery(ext.TIME_ELAPSED_EXT, query);
    }

    function endGPUTime() {
      gl.endQuery(ext.TIME_ELAPSED_EXT);
    }

    return {
      isGPUTimeAvailable,
      getGPUTime,
      endGPUTime,
    };
  }
</script>

<Layout api="WebGL" />

<style is:global>
  div.tp-dfwv {
    --tp-blade-value-width: 20ch;

    .tp-txtv_i {
      padding: 6px;
    }
  }
</style>
